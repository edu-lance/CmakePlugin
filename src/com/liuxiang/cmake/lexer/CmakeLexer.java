/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.liuxiang.cmake.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.liuxiang.cmake.psi.CmakeTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>cmake.flex</tt>
 */
class CmakeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\2\0\1\5\35\0\1\46\1\44\1\51\1\47\1\34\1\60"+
    "\1\42\1\45\1\37\1\56\1\54\1\43\1\52\1\41\1\40\1\53\1\0\1\35\1\36\1\50\1\55"+
    "\1\33\1\62\1\61\1\57\5\0\1\13\1\0\1\10\1\27\1\6\1\21\1\12\1\26\1\31\1\0\1"+
    "\14\1\0\1\11\1\22\1\7\1\15\1\24\1\32\1\20\1\17\1\25\1\23\1\16\3\0\1\30\13"+
    "\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\17\1\45\0\1\5"+
    "\5\0\1\6\70\0\1\6\206\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\146\0\231\0\314\0\377\0\u0132"+
    "\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\63\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\63\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc"+
    "\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4"+
    "\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c"+
    "\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14"+
    "\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac"+
    "\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244"+
    "\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc"+
    "\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\u270c"+
    "\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871\0\u28a4"+
    "\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3\0\u29d6\0\u2a09\0\u2a3c"+
    "\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b\0\u2b6e\0\u2ba1\0\u2bd4"+
    "\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3\0\u2d06\0\u2d39\0\u2d6c"+
    "\0\u2d9f\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04"+
    "\0\u2f37\0\u2f6a\0\u2f9d\0\u2fd0\0\u3003\0\u3036\0\u3069\0\u309c"+
    "\0\u30cf\0\u3102\0\u3135\0\u3168\0\u319b\0\u31ce\0\u3201\0\u3234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\2"+
    "\1\10\3\2\1\11\6\2\1\12\1\2\1\13\1\14"+
    "\4\2\1\15\1\16\1\2\1\17\1\20\2\2\1\21"+
    "\1\22\2\2\1\23\2\2\1\24\1\2\1\25\7\2"+
    "\64\0\4\3\57\0\1\3\1\4\2\3\56\0\1\6"+
    "\3\0\57\6\7\0\1\26\74\0\1\27\56\0\1\30"+
    "\55\0\1\31\64\0\1\32\64\0\1\33\102\0\1\34"+
    "\107\0\1\35\46\0\1\36\2\0\1\37\64\0\1\40"+
    "\53\0\1\41\56\0\1\42\64\0\1\43\73\0\1\44"+
    "\45\0\1\45\35\0\1\46\73\0\1\47\47\0\1\50"+
    "\73\0\1\51\66\0\1\52\61\0\1\53\75\0\1\54"+
    "\61\0\1\55\74\0\1\56\62\0\1\57\67\0\1\60"+
    "\47\0\1\61\66\0\1\62\65\0\1\63\61\0\1\64"+
    "\54\0\1\65\33\0\1\66\64\0\1\67\71\0\1\70"+
    "\71\0\1\71\44\0\1\72\61\0\1\73\106\0\1\74"+
    "\75\0\1\75\46\0\1\76\75\0\1\77\52\0\1\100"+
    "\66\0\1\101\53\0\1\102\62\0\1\103\101\0\1\104"+
    "\61\0\1\105\2\0\1\106\16\0\1\107\72\0\1\110"+
    "\56\0\1\111\56\0\1\112\73\0\1\113\76\0\1\114"+
    "\100\0\1\115\41\0\1\116\65\0\1\117\60\0\1\120"+
    "\73\0\1\121\54\0\1\122\56\0\1\123\62\0\1\124"+
    "\62\0\1\125\41\0\1\126\63\0\1\127\67\0\1\130"+
    "\64\0\1\131\47\0\1\132\112\0\1\133\72\0\1\134"+
    "\61\0\1\101\64\0\1\101\61\0\1\135\47\0\1\136"+
    "\64\0\1\137\36\0\1\140\104\0\1\141\76\0\1\142"+
    "\20\0\1\143\102\0\1\144\45\0\1\145\63\0\1\146"+
    "\66\0\1\147\104\0\1\101\67\0\1\150\50\0\1\151"+
    "\105\0\1\152\52\0\1\153\51\0\1\154\1\155\3\0"+
    "\1\156\2\0\1\157\2\0\1\160\1\161\60\0\1\162"+
    "\62\0\1\163\26\0\1\164\65\0\1\165\56\0\1\166"+
    "\71\0\1\167\71\0\1\170\75\0\1\171\65\0\1\172"+
    "\26\0\1\173\62\0\1\174\107\0\1\175\63\0\1\176"+
    "\60\0\1\177\66\0\1\200\74\0\1\201\45\0\1\202"+
    "\61\0\1\203\36\0\1\204\64\0\1\205\55\0\1\206"+
    "\73\0\1\207\55\0\1\210\60\0\1\211\113\0\1\212"+
    "\32\0\1\213\107\0\1\214\70\0\1\215\71\0\1\216"+
    "\56\0\1\217\55\0\1\220\61\0\1\221\54\0\1\222"+
    "\74\0\1\223\47\0\1\224\64\0\1\154\2\0\1\225"+
    "\2\0\1\226\32\0\1\227\65\0\1\230\57\0\1\231"+
    "\63\0\1\232\70\0\1\233\73\0\1\152\71\0\1\234"+
    "\74\0\1\235\51\0\1\236\53\0\1\237\70\0\1\240"+
    "\54\0\1\241\65\0\1\242\57\0\1\243\102\0\1\244"+
    "\43\0\1\101\72\0\1\245\53\0\1\246\32\0\1\247"+
    "\103\0\1\73\51\0\1\250\54\0\1\251\64\0\1\252"+
    "\107\0\1\253\72\0\1\254\51\0\1\101\74\0\1\255"+
    "\66\0\1\256\53\0\1\257\76\0\1\260\34\0\1\261"+
    "\71\0\1\262\71\0\1\263\51\0\1\264\37\0\1\265"+
    "\56\0\1\266\63\0\1\267\101\0\1\270\101\0\1\271"+
    "\64\0\1\272\43\0\1\273\75\0\1\262\50\0\1\274"+
    "\40\0\1\275\110\0\1\276\55\0\1\277\62\0\1\101"+
    "\74\0\1\300\23\0\1\301\61\0\1\302\76\0\1\303"+
    "\57\0\1\304\111\0\1\305\71\0\1\306\20\0\1\307"+
    "\126\0\1\277\46\0\1\310\67\0\1\311\25\0\1\312"+
    "\104\0\1\313\40\0\1\314\72\0\1\315\53\0\1\316"+
    "\72\0\1\317\106\0\1\74\62\0\1\277\61\0\1\320"+
    "\53\0\1\321\35\0\1\322\122\0\1\323\66\0\1\273"+
    "\22\0\1\324\67\0\1\325\65\0\1\326\65\0\1\327"+
    "\67\0\1\330\63\0\1\331\60\0\1\154\4\0\1\332"+
    "\1\226\64\0\1\333\26\0\1\334\67\0\1\335\62\0"+
    "\1\336\55\0\1\337\105\0\1\101\63\0\1\340\63\0"+
    "\1\341\73\0\1\342\32\0\1\343\56\0\1\344\56\0"+
    "\1\325\71\0\1\345\77\0\1\346\64\0\1\347\71\0"+
    "\1\101\33\0\1\350\56\0\1\351\73\0\1\335\52\0"+
    "\1\352\117\0\1\353\26\0\1\354\73\0\1\73\100\0"+
    "\1\355\32\0\1\356\66\0\1\357\103\0\1\360\65\0"+
    "\1\361\14\0\1\362\14\0\1\363\110\0\1\364\61\0"+
    "\1\365\62\0\1\366\44\0\1\73\114\0\1\367\50\0"+
    "\1\263\64\0\1\263\32\0\1\370\120\0\1\371\51\0"+
    "\1\372\63\0\1\373\57\0\1\374\74\0\1\375\47\0"+
    "\1\376\102\0\1\377\56\0\1\u0100\61\0\1\224\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12903];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\23\1\45\0\1\11\5\0\1\11\70\0"+
    "\1\1\206\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CmakeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 7: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 8: break;
          case 3: 
            { return TokenType.NEW_LINE_INDENT;
            }
          case 9: break;
          case 4: 
            { return CmakeTypes.COMMENT;
            }
          case 10: break;
          case 5: 
            { return CmakeTypes.METHOD;
            }
          case 11: break;
          case 6: 
            { return CmakeTypes.KEY;
            }
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
